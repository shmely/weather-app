{"version":3,"sources":["history.js","cmps/NavBar.jsx","services/eventBusService.js","cmps/UserMessage.jsx","services/httpService.js","services/storageService.js","services/weatherService.js","store/actions/weatherActions.js","cmps/AutoComplete.jsx","cmps/ForcastDay.jsx","cmps/WeatherView.jsx","pages/WeatherDetails.jsx","pages/Favorites.jsx","App.jsx","serviceWorker.js","store/reducers/weatherReducer.js","store/reducers/index.js","store/store.js","index.js"],"names":["history","createBrowserHistory","useStyles","makeStyles","theme","button","margin","spacing","NavBar","props","classes","useState","homeState","changeHomeState","favState","changefavState","showMenu","document","body","classList","toggle","console","log","useEffect","location","pathname","includes","listen","className","onClick","Button","variant","color","disabled","push","startIcon","eventBus","on","eventName","listener","callListener","detail","window","addEventListener","removeEventListener","emit","data","dispatchEvent","CustomEvent","UserMessage","state","msg","type","this","unsubscribeFromEventBus","setState","txt","setTimeout","Alert","severity","Component","BASE_URL","axios","Axios","create","httpService","endpoint","ajax","a","method","url","res","dir","response","saveToStorage","key","val","localStorage","setItem","JSON","stringify","loadFromStorage","getItem","parse","removeFromStorage","removeItem","API_KEY","term","locations","storageService","locationId","fiveDayForcast","_getDate","date","Date","getDay","getMonth","getFullYear","weatherService","getLocations","getForcast","addToFavorits","favorits","Key","LocalizedName","getFavorits","removeFromFavorits","removeFav","idx","findIndex","fav","splice","dispatch","forcast","AutoComplete","options","showOptions","setOption","error","message","onChange","target","value","length","placeholder","map","option","mapDispatchToProps","connect","weatherApp","ForcastDay","buildForcast","days","favorit","curForcast","DailyForecasts","index","temp","Math","round","Temperature","Minimum","Value","Maximum","icon","String","Day","Icon","padStart","desc","LongPhrase","day","windSpeed","Wind","Speed","onShowFullForcast","alert","prevProps","isFullDetails","isMain","isInFavorits","src","alt","showCityName","WeatherView","checkIsFavorits","favLocations","currLoc","find","favLoc","favText","addRemoveFromFavFunc","WeatherDetails","isShowWeather","onSelectLocation","onLocationSelected","Favorites","loadFavorits","App","path","component","exact","Boolean","hostname","match","initialState","rootReducer","combineReducers","action","filter","loc","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.99c20b2e.chunk.js","sourcesContent":["import { createBrowserHistory } from 'history';\r\nexport const history = createBrowserHistory();\r\n","import React, { useEffect, useState } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport StarIcon from '@material-ui/icons/Star';\r\nimport MenuOutlinedIcon from '@material-ui/icons/MenuOutlined';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport { history } from '../history';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n}));\r\nexport function NavBar(props) {\r\n    const classes = useStyles();\r\n    const [homeState, changeHomeState] = useState(false);\r\n    const [favState, changefavState] = useState(false);\r\n\r\n\r\n    function showMenu() {\r\n        document.body.classList.toggle('menu-open');\r\n        console.log(document.body.classList);\r\n    }\r\n    useEffect(() => {\r\n        if (history.location.pathname.includes('favorites')) {\r\n            changeHomeState(false);\r\n            changefavState(true);\r\n        }\r\n        else {\r\n            changeHomeState(true);\r\n            changefavState(false);\r\n        }\r\n        return history.listen((location) => {\r\n            if (location.pathname.includes('favorites')) {\r\n                changeHomeState(false);\r\n                changefavState(true);\r\n            }\r\n            else {\r\n                changeHomeState(true);\r\n                changefavState(false);\r\n            }\r\n        })\r\n    }, [homeState, favState])\r\n\r\n    return (\r\n        <header className=\"flex space-between align-center\">\r\n            <h1>Weather App.</h1>\r\n            <nav className=\".weather-cont flex space-between align-center\">\r\n\r\n                <div>\r\n                    <CloseIcon className=\"close\" onClick={showMenu}></CloseIcon>\r\n                    <Button variant=\"contained\" color=\"primary\" disabled={homeState} onClick={() => { history.push('/') }} className={classes.button} startIcon={<HomeIcon />}>Home</Button>\r\n                    <Button variant=\"contained\" color=\"secondary\" disabled={favState} onClick={() => { history.push('/favorites') }} className={classes.button} startIcon={<StarIcon />}>Favorites</Button>\r\n                </div>\r\n            </nav>\r\n            <MenuOutlinedIcon onClick={showMenu} className=\"btn-menu\"></MenuOutlinedIcon>\r\n        </header>\r\n\r\n    )\r\n\r\n}\r\n","function on(eventName, listener) {\r\n    const callListener = ({ detail }) => {\r\n        listener(detail)\r\n    }\r\n    window.addEventListener(eventName, callListener)\r\n    return () => {\r\n        window.removeEventListener(eventName, callListener)\r\n    }\r\n}\r\n\r\nfunction emit(eventName, data) {\r\n    window.dispatchEvent(new CustomEvent(eventName, { detail: data }));\r\n}\r\n\r\n\r\nexport const eventBus = { on, emit }","import React, { Component } from 'react';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport { eventBus } from '../services/eventBusService';\r\n\r\nexport class UserMessage extends Component {\r\n    state = {\r\n        msg: null,\r\n        type: 'error'\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.unsubscribeFromEventBus = eventBus.on('show-msg', (data) => {\r\n            const delay = 3000;\r\n            this.setState({ msg: data.txt, type: data.type })\r\n            setTimeout(() => {\r\n                this.setState({ msg: null, type: null })\r\n            }, delay)\r\n        })\r\n    }\r\n    componentWillUnmount() {\r\n        this.unsubscribeFromEventBus();\r\n    }\r\n\r\n    render() {\r\n\r\n        const { msg, type } = this.state;\r\n        if (!msg) return ''\r\n        console.log(msg);\r\n        return (\r\n\r\n            <div className=\"user-message\">\r\n                <Alert variant=\"filled\" severity={type}>{msg}</Alert>\r\n            </div >\r\n\r\n        )\r\n    }\r\n}","import { history } from '../history';\r\nimport Axios from 'axios';\r\n\r\nconst BASE_URL = 'http://dataservice.accuweather.com/'\r\n\r\n\r\nconst axios = Axios.create({\r\n    //withCredentials: true\r\n});\r\n\r\n\r\nexport const httpService = {\r\n    get(endpoint, data) {\r\n        return ajax(endpoint, 'GET', data)\r\n    },\r\n    post(endpoint, data) {\r\n\r\n        return ajax(endpoint, 'POST', data)\r\n    },\r\n    put(endpoint, data) {\r\n        return ajax(endpoint, 'PUT', data)\r\n    },\r\n    delete(endpoint, data) {\r\n        return ajax(endpoint, 'DELETE', data)\r\n    }\r\n}\r\n\r\n\r\nasync function ajax(endpoint, method = 'get', data = null) {\r\n\r\n    try {\r\n        const res = await axios({\r\n            url: `${BASE_URL}${endpoint}`,\r\n            method,\r\n            data\r\n        })\r\n        return res.data;\r\n    } catch (err) {\r\n        console.dir(err);\r\n        // if (err.response && err.response.status === 401) {\r\n        if (err.response) {\r\n            history.push('/login');\r\n        }\r\n        throw err;\r\n    }\r\n}","export default {\r\n    saveToStorage,\r\n    loadFromStorage,\r\n    removeFromStorage\r\n}\r\n\r\nfunction saveToStorage(key, val) {\r\n    localStorage.setItem(key, JSON.stringify(val))\r\n}\r\n\r\nfunction loadFromStorage(key) {\r\n    var val = localStorage.getItem(key)\r\n    return JSON.parse(val)\r\n}\r\n\r\nfunction removeFromStorage(key) {\r\n    localStorage.removeItem(key);\r\n}","import { httpService } from './httpService';\r\nimport storageService from './storageService'\r\nconst API_KEY = 'XCxgDDUWb7a69Zs2B6NyGNe4YZUCV0GZ';\r\nconst LOCATIONS_PERFIX = 'LOCATION_';\r\nconst FORCAST_PERFIX = 'FORCAST_'\r\nconst FAVORITS = 'FAVORITS'\r\n\r\n\r\n\r\n\r\nasync function getLocations(term) {\r\n\r\n    let locations = storageService.loadFromStorage(LOCATIONS_PERFIX + term);\r\n    if (!locations) {\r\n        locations = await httpService.get(`locations/v1/cities/autocomplete?apikey=${API_KEY}&q=${term}`);\r\n        storageService.saveToStorage(LOCATIONS_PERFIX + term, locations);\r\n    }\r\n    return locations;\r\n}\r\nasync function getForcast(locationId) {\r\n    let fiveDayForcast = storageService.loadFromStorage(FORCAST_PERFIX + locationId + '_' + _getDate());\r\n    if (!fiveDayForcast) {\r\n        fiveDayForcast = await httpService.get(`forecasts/v1/daily/5day/${locationId}?apikey=${API_KEY}&details=true&metric=true`);\r\n        storageService.saveToStorage(FORCAST_PERFIX + locationId + '_' + _getDate(), fiveDayForcast);\r\n    }\r\n    return fiveDayForcast;\r\n\r\n}\r\n\r\nfunction addToFavorits(location) {\r\n    let favorits = storageService.loadFromStorage(FAVORITS);\r\n    if (favorits) {\r\n        favorits.push({ Key: location.Key, LocalizedName: location.LocalizedName });\r\n        storageService.saveToStorage(FAVORITS, favorits);\r\n    } else {\r\n        favorits = [];\r\n        favorits.push({ Key: location.Key, LocalizedName: location.LocalizedName });\r\n\r\n    }\r\n    storageService.saveToStorage(FAVORITS, favorits);\r\n    return favorits;\r\n}\r\n\r\nfunction getFavorits() {\r\n    let favorits = storageService.loadFromStorage(FAVORITS);\r\n    if (!favorits) favorits = [];\r\n    return favorits;\r\n}\r\n\r\nfunction removeFromFavorits(removeFav) {\r\n    let favorits = storageService.loadFromStorage(FAVORITS);\r\n    const idx = favorits.findIndex(fav => fav.Key === removeFav.Key);\r\n    favorits.splice(idx, 1);\r\n    storageService.saveToStorage(FAVORITS, favorits);\r\n\r\n\r\n\r\n}\r\n\r\nfunction _getDate() {\r\n    const date = new Date();\r\n    return `${date.getDay() + 1}/${date.getMonth() + 1}/${date.getFullYear()}`;\r\n}\r\n\r\nexport const weatherService = {\r\n    getLocations,\r\n    getForcast,\r\n    addToFavorits,\r\n    getFavorits,\r\n    removeFromFavorits\r\n\r\n}","import { weatherService } from '../../services/weatherService.js';\r\n\r\nexport const GET_LOCATIONS = 'GET_LOCATIONS';\r\nexport const GET_FORCAST = 'GET_FORCAST';\r\nexport const ADD_FAVORITS = 'ADD_FAVORITS';\r\nexport const LOAD_FAVORITS = 'LOAD_FAVORITS';\r\nexport const REMOVE_FAVORITS = 'REMOVE_FAVORITS'\r\n\r\n\r\n\r\nexport function getLocations(term) {\r\n    return async dispatch => {\r\n        const locations = await weatherService.getLocations(term)\r\n        dispatch({ type: GET_LOCATIONS, locations });\r\n    }\r\n}\r\nexport function getForcast(location) {\r\n    return async dispatch => {\r\n        const forcast = await weatherService.getForcast(location.Key)\r\n        dispatch({ type: GET_FORCAST, forcast, location });\r\n    }\r\n}\r\nexport function addToFavorits(location) {\r\n    return async dispatch => {\r\n        await weatherService.addToFavorits(location);\r\n        dispatch({ type: ADD_FAVORITS, location });\r\n    }\r\n}\r\n\r\nexport function removeFromFavorits(location) {\r\n    return async dispatch => {\r\n        await weatherService.removeFromFavorits(location);\r\n        dispatch({ type: REMOVE_FAVORITS, location });\r\n    }\r\n}\r\nexport function loadFavorits() {\r\n    return dispatch => {\r\n        const favorits = weatherService.getFavorits();\r\n        dispatch({ type: LOAD_FAVORITS, favorits });\r\n    }\r\n}\r\n\r\n// export function loadBoard(id) {\r\n//     return async dispatch => {\r\n//         const board = await boardService.getById(id);\r\n//         dispatch({ type: LOAD_BOARD, board });\r\n//     }\r\n// }\r\n\r\n// export function addBoard(addedBoard) {\r\n//     return async dispatch => {\r\n//         const board = await boardService.add(addedBoard);\r\n//         dispatch({ type: ADD_BOARD, board })\r\n//     }\r\n// }\r\n\r\n// export function updateBoard(updatedBoard) {\r\n//     return async (dispatch) => {\r\n//         dispatch({ type: UPDATE_BOARD, board: updatedBoard });\r\n\r\n//         try {\r\n//             await boardService.update(updatedBoard);\r\n//         } catch (err) {\r\n//             // dispatch({ type: UPDATE_BOARD, board: keepBoard });\r\n//         }\r\n\r\n//         socketService.emit('board updated', updatedBoard._id);\r\n//     }\r\n// }\r\n\r\n// export function removeBoard(boardId) {\r\n//     return dispatch => {\r\n//         boardService.remove(boardId)\r\n//             .then(() => dispatch({ type: REMOVE_BOARD, boardId }));\r\n//     }\r\n// }\r\n\r\n// export function setCard(card) {\r\n//     return dispatch => {\r\n//         dispatch({ type: 'SET_CARD', card });\r\n//     }\r\n// }","import React, { Component } from 'react';\r\nimport { weatherService } from '../services/weatherService';\r\nimport { getForcast } from '../store/actions/weatherActions';\r\nimport { connect } from 'react-redux';\r\nimport { eventBus } from '../services/eventBusService';\r\n\r\nclass AutoComplete extends Component {\r\n\r\n    state = {\r\n        txt: '',\r\n        options: [],\r\n        showOptions: false\r\n    }\r\n\r\n    setOption = (location) => {       \r\n        this.setState({ txt: location.LocalizedName, showOptions: false });\r\n        try {\r\n            this.props.getForcast(location);\r\n        } catch (error) {\r\n            eventBus.emit('show-msg', {\r\n                type: 'error',\r\n                txt: error.message\r\n            })\r\n        }\r\n        \r\n    }\r\n\r\n    onChange = async ({ target }) => {\r\n        this.setState({ txt: target.value, showOptions: target.value.length > 0 ? true : false }, () => {\r\n            if (this.state.txt.length >= 2) {\r\n                try {\r\n                    this.getLocations(target.value);\r\n                } catch (error) {\r\n                    eventBus.emit('show-msg', {\r\n                        type: 'error',\r\n                        txt: error.message\r\n                    })\r\n                }\r\n                \r\n            }\r\n        })\r\n    }\r\n\r\n    getLocations = async (term) => {\r\n        const locations = await weatherService.getLocations(term);\r\n        this.setState({ options: locations })\r\n    }\r\n\r\n    render() {\r\n        const { showOptions, options, txt } = this.state;\r\n\r\n        return (\r\n            <div className=\"autocomplete-cont flex column align-center\" >\r\n                <input type=\"text\" value={txt} onChange={this.onChange} placeholder=\"search location e.g tel aviv\" />\r\n                <ul className=\"autocomplete-results align-start clean-list flex column align-\">\r\n                    {showOptions && options.map((option, idx) => <li onClick={() => this.setOption(option)} value={option.key} key={idx}>{option.LocalizedName}</li>)}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        forcast: state.weatherApp.forcast\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    getForcast\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AutoComplete);\r\n","import React, { Component } from 'react';\r\nimport { getForcast } from '../store/actions/weatherActions';\r\nimport { connect } from 'react-redux';\r\nimport { weatherService } from '../services/weatherService';\r\nimport { history } from '../history';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport { eventBus } from '../services/eventBusService';\r\n\r\n\r\nclass ForcastDay extends Component {\r\n    state = {\r\n        forcast: null\r\n    }\r\n\r\n    async componentDidMount() {\r\n        await this.buildForcast();\r\n    }\r\n    async componentDidUpdate(prevProps) {\r\n        if (prevProps.location !== this.props.location) await this.buildForcast();\r\n\r\n    }\r\n\r\n    buildForcast = async () => {\r\n        let curForcast;\r\n        let location;\r\n        const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n        if (this.props.favorit) {\r\n            try {\r\n                curForcast = await weatherService.getForcast(this.props.favorit.Key);\r\n            } catch (error) {\r\n                eventBus.emit('show-msg', {\r\n                    type: 'error',\r\n                    txt: error.message\r\n                })\r\n            }\r\n           \r\n            curForcast = curForcast.DailyForecasts[this.props.index];\r\n            location = this.props.favorit.LocalizedName;\r\n        }\r\n        else if (this.props.forcast) {\r\n            curForcast = this.props.forcast.DailyForecasts[this.props.index];\r\n            location = this.props.location.LocalizedName\r\n        }\r\n        else return;\r\n\r\n        this.setState({\r\n            forcast: {\r\n                temp: `${Math.round(curForcast.Temperature.Minimum.Value)}℃ - ${Math.round(curForcast.Temperature.Maximum.Value)}℃`,\r\n                icon: `https://developer.accuweather.com/sites/default/files/${String(curForcast.Day.Icon).padStart(2, 0)}-s.png`,\r\n                desc: curForcast.Day.LongPhrase,\r\n                day: days[new Date(curForcast.Date).getDay()],\r\n                location,\r\n                windSpeed: (!curForcast.Day.Wind.Speed.Value) ? ' ' : curForcast.Day.Wind.Speed.Value + ' km/h'\r\n            }\r\n        })\r\n    }\r\n\r\n    onShowFullForcast = async () => {\r\n        if (!this.props.favorit) return;\r\n        try {\r\n            await this.props.getForcast(this.props.favorit);\r\n            history.push('/');\r\n\r\n        } catch (error) {\r\n            alert(error);\r\n        }\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        const { forcast } = this.state\r\n        const isFullDetails = this.props.isMain;\r\n        const { isInFavorits } = this.props\r\n        if (!forcast) return '';\r\n        return (\r\n            <section className=\"forcast-Day\">\r\n                {isFullDetails &&\r\n                    <div className=\"full-details flex column align-start\">\r\n                        <div className=\"line-one flex space-between\">\r\n                            <h1>{forcast.location}</h1>\r\n                            <img src={forcast.icon} alt=\"\"></img>\r\n                            {isInFavorits && <FavoriteIcon className=\"fav-icon\"></FavoriteIcon>}\r\n                        </div>\r\n                        <h2>{forcast.desc}</h2>\r\n                        <h1>{forcast.temp}</h1>\r\n                        <h2>{`Wind Speed: ${forcast.windSpeed}`}</h2>\r\n                    </div>\r\n                }\r\n                {\r\n                    !isFullDetails &&\r\n                    <div className=\"details flex column align-center\" onClick={this.onShowFullForcast}>\r\n                        {this.props.showCityName && <h2>{forcast.location}</h2>}\r\n                        {!this.props.showCityName && <h2>{forcast.day}</h2>}\r\n                        <img src={forcast.icon} alt=\"\"></img>\r\n                        <h2>{forcast.temp}</h2>\r\n                    </div>\r\n                }\r\n            </section >\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        forcast: state.weatherApp.forcast,\r\n        location: state.weatherApp.location\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    getForcast\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ForcastDay);\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport ForcastDay from './ForcastDay';\r\nimport Button from '@material-ui/core/Button';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport { connect } from 'react-redux';\r\nimport { weatherService } from '../services/weatherService';\r\nimport { addToFavorits, removeFromFavorits } from '../store/actions/weatherActions'\r\nimport { eventBus } from '../services/eventBusService';\r\n\r\n\r\nclass WeatherView extends Component {\r\n\r\n    addToFavorits = () => {\r\n        try {\r\n            this.props.addToFavorits(this.props.location);\r\n            eventBus.emit('show-msg', {\r\n                type: 'success',\r\n                txt: 'Added to favorits successfully'\r\n            })\r\n        } catch (error) {\r\n            eventBus.emit('show-msg', {\r\n                type: 'error',\r\n                txt: error.message\r\n            })\r\n        }\r\n\r\n    }\r\n    removeFromFavorits = () => {\r\n\r\n        try {\r\n            this.props.removeFromFavorits(this.props.location);\r\n            eventBus.emit('show-msg', {\r\n                type: 'success',\r\n                txt: 'Removed from favorits successfully'\r\n            })\r\n\r\n        } catch (error) {\r\n            eventBus.emit('show-msg', {\r\n                type: 'error',\r\n                txt: error.message\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    checkIsFavorits = () => {\r\n        const favLocations = weatherService.getFavorits();\r\n        const currLoc = this.props.location;\r\n        const foundLocation = favLocations.find(favLoc => favLoc.Key === currLoc.Key);\r\n        return !foundLocation ? false : true\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        const isInFavorits = this.checkIsFavorits();\r\n        const favText = isInFavorits ? 'Remove from Favorites' : 'Add To Favorites';\r\n        const addRemoveFromFavFunc = isInFavorits ? this.removeFromFavorits : this.addToFavorits;\r\n        return (\r\n            <section className=\"weather-view flex column\">\r\n                <div className=\"main-weather flex wrap space-between\">\r\n                    <ForcastDay isInFavorits={isInFavorits} index={0} isMain={true}></ForcastDay>\r\n\r\n\r\n                    <div>\r\n                        <Button variant=\"contained\" color=\"secondary\" onClick={addRemoveFromFavFunc} startIcon={<FavoriteIcon />}>{favText}</Button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"forcast-days flex wrap space-between wrap\">\r\n                    <ForcastDay index={0} isMain={false}></ForcastDay>\r\n                    <ForcastDay index={1} isMain={false}></ForcastDay>\r\n                    <ForcastDay index={2} isMain={false}></ForcastDay>\r\n                    <ForcastDay index={3} isMain={false}></ForcastDay>\r\n                    <ForcastDay index={4} isMain={false}></ForcastDay>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n\r\n        location: state.weatherApp.location,\r\n        favorits: state.weatherApp.favorits\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    addToFavorits,\r\n    removeFromFavorits\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(WeatherView);\r\n","import React, { Component } from 'react'\r\nimport AutoComplete from '../cmps/AutoComplete';\r\nimport WeatherView from '../cmps/WeatherView';\r\nimport { getForcast } from '../store/actions/weatherActions';\r\nimport { eventBus } from '../services/eventBusService';\r\nimport { connect } from 'react-redux';\r\n\r\nclass WeatherDetails extends Component {\r\n\r\n    async componentDidMount() {\r\n        if (this.props.location) this.props.getForcast(this.props.location);\r\n        else {\r\n            try {\r\n                await this.props.getForcast({ Key: '215854', LocalizedName: 'Tel Aviv' })\r\n            } catch (error) {\r\n\r\n                eventBus.emit('show-msg', {\r\n                    type: 'error',\r\n                    txt: error.message\r\n                })\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        const isShowWeather = (!this.props.forcast) ? false : true;\r\n        return (\r\n            <main className=\"weather-details weather-cont flex column align-center\">\r\n                <AutoComplete onSelectLocation={this.onLocationSelected}></AutoComplete>\r\n                {isShowWeather && <WeatherView></WeatherView>}\r\n            </main>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        forcast: state.weatherApp.forcast,\r\n        location: state.weatherApp.location\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    getForcast\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(WeatherDetails);\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport ForcastDay from '../cmps/ForcastDay'\r\nimport { loadFavorits } from '../store/actions/weatherActions';\r\nimport { eventBus } from '../services/eventBusService';\r\n\r\n\r\nclass Favorites extends Component {\r\n\r\n    componentDidMount() {\r\n        try {\r\n            this.props.loadFavorits();\r\n        } catch (error) {\r\n            eventBus.emit('show-msg', {\r\n                type: 'error',\r\n                txt: error.message\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        if (!this.props.favorits) return <h1>No Favorits Yet!!!!</h1>\r\n\r\n        return (\r\n            <section className=\"favorits-cont flex column align-center\">\r\n                <h1>Favorits</h1>\r\n                <div className=\"flex wrap\">\r\n                    {this.props.favorits.map((fav, idx) => <ForcastDay showCityName={true} index={0} isMain={false} key={idx} favorit={fav}></ForcastDay>)}\r\n                </div>\r\n\r\n            </section>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n\r\n        favorits: state.weatherApp.favorits\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    loadFavorits\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Favorites);\r\n","import React from 'react';\r\nimport { Router, Switch, Route } from 'react-router';\r\nimport { history } from './history';\r\nimport { NavBar } from './cmps/NavBar';\r\nimport { UserMessage } from './cmps/UserMessage';\r\nimport WeatherDetails from './pages/WeatherDetails';\r\nimport Favorites from './pages/Favorites';\r\n\r\n\r\n\r\nexport function App() {\r\n  return (\r\n    <div className=\"weather-cont\">\r\n      <NavBar></NavBar>\r\n      <Router history={history}>\r\n\r\n        <Switch>\r\n          <Route path=\"/\" component={WeatherDetails} exact />\r\n          <Route path=\"/favorites\" component={Favorites} exact />\r\n        </Switch>\r\n      </Router>\r\n      <UserMessage></UserMessage>\r\n    </div>\r\n  );\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { GET_LOCATIONS, GET_FORCAST, ADD_FAVORITS, LOAD_FAVORITS, REMOVE_FAVORITS } from '../actions/weatherActions';\r\n\r\n\r\nconst initialState = {\r\n    locations: [],\r\n    forcast: null,\r\n    location: null,\r\n    favorits: []\r\n\r\n}\r\n\r\nexport function weatherReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case GET_LOCATIONS:\r\n            return {\r\n                ...state,\r\n                locations: action.locations\r\n            }\r\n        case GET_FORCAST:\r\n            {\r\n                return {\r\n                    ...state,\r\n                    forcast: action.forcast,\r\n                    location: action.location\r\n                }\r\n            }\r\n        case ADD_FAVORITS:\r\n            {\r\n                return {\r\n                    ...state,\r\n                    favorits: [...state.favorits, action.location]\r\n                }\r\n            }\r\n        case LOAD_FAVORITS:\r\n            {\r\n                return {\r\n                    ...state,\r\n                    favorits: action.favorits\r\n                }\r\n            }\r\n        case REMOVE_FAVORITS:\r\n            {\r\n                return {\r\n                    ...state,\r\n                    favorits: state.favorits.filter(loc => !loc.Key !== action.location.Key)\r\n                }\r\n            }\r\n\r\n            // case LOAD_BOARD:            \r\n            //     return {\r\n            //         ...state,\r\n            //         board: action.board\r\n            //     };\r\n            // case ADD_BOARD:\r\n            //     return {\r\n            //         ...state,\r\n            //         board: action.board\r\n            //     };\r\n            // case UPDATE_BOARD:            \r\n            //     socketService.emit('board updated', action.board._id)\r\n            //     return {\r\n            //         ...state,\r\n            //         board: action.board\r\n            //     }\r\n            // case REMOVE_BOARD:\r\n            //     return {\r\n            //         ...state,\r\n            //         boards: state.boards.filter(board => board._id !== action.boardId)\r\n            //     };\r\n            // case 'SET_CARD':\r\n            //     return {\r\n            //         ...state,\r\n            //         card: action.card\r\n            //     }\r\n        default:\r\n            return state;\r\n    };\r\n}","import { combineReducers } from 'redux';\r\nimport { weatherReducer } from './weatherReducer';\r\n\r\n\r\n\r\nexport const rootReducer = combineReducers({\r\n    weatherApp: weatherReducer\r\n})","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { rootReducer } from './reducers/index';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport const store = createStore(\r\n    rootReducer,\r\n    composeEnhancers(applyMiddleware(thunk))\r\n);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport './style/global.scss';\r\nimport { App } from './App.jsx';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { store } from './store/store';\r\n\r\n\r\nReactDOM.render( <\r\n        Provider store = { store } >\r\n        <\r\n        App / >\r\n        <\r\n        /Provider>,\r\n        document.getElementById('root')\r\n    )\r\n    // If you want your app to work offline and load faster, you can change\r\n    // unregister() to register() below. Note this comes with some pitfalls.\r\n    // Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}